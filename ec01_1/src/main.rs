enum Enemy {
    Ant,
    Beetle,
    Cockroach,
}

impl From<Enemy> for i32 {
    fn from(value: Enemy) -> Self {
        match value {
            Enemy::Ant => 0,
            Enemy::Beetle => 1,
            Enemy::Cockroach => 3,
        }
    }
}

impl From<char> for Enemy {
    fn from(value: char) -> Self {
        match value {
            'A' => Enemy::Ant,
            'B' => Enemy::Beetle,
            'C' => Enemy::Cockroach,
            _ => panic!("Invalid enemy"),
        }
    }
}

const NOTES: &str = "CAAAABCBBAAABCCACCCBBCCBBAAACBACCCBAACCBBAACBCBACCCBCCBBACCBCBCCABCBBCCBBABBAACCCCCBAACBBCCCABACBBCBCACCBCAACBBABCCACAAAABBABAAACBCCBCBBAACCCBCBBCAAACBBCABCACAAABAACCCBCCCCCBABBBCBACCBACAABACABBBCCCAAAAACCAABBAACCCCCBBBAACCCABCACCACCCACABCABBBACBACACACAACACCBACCBABACBACBBCBABBCCBACCCBCAACCBCCBACBACBBBACCACAABBAAACBCABAABAAACCCCACABACABCACACABCACBABBBABCCBCCCABBBCAABACCCACBCCACABCBAACAAAACCACBAAAAABBCBAABCAABBBCBACAABABBCCCACCACAAABBBCCBBCCBABCABBCCCBCCBCCBAABABABCACCACCABBCCCCCCCBBBCCBBABABAAAACCCBBABABCCABACACCACBCBCBAACABCBACBBABCABBBBAAAAACAABACBCCAACAAAABACACCBACACCBBACABCABAAAACACBCAACACCCABCCABCCACCBCABCBABCACBBCBAAACBCACABBCBACBBBACBBACBCACCBCBBCCCCCABBBACABABCABABCABBBCCABCAAAABABACBBBABBABCCBCBACCCBBACBCCBBCBBBBACCCCCBACACBCBCBCAACCCAABBCABABBABCBCBBCBCCABBCBBCACCBABBCCCACBCBCABCCACCCCCBBABCBAACACCABBCACCBCACAABCAABACAAAABBABCAABCCAACBBBAAAACBCBCABBCCAAACACCCAABAABABABBACABACAABBBBCAACCBBBCBBBBAAACAACCBCACBBBCCACBBABBCBCACCABAAABACCCACCBCAAAABCBCACCCACBAAABCBCBABCACAAACAAABAAC";

fn main() {
    let results: i32 = NOTES
        .chars()
        .map(|c| c.into())
        .map(|e: Enemy| Into::<i32>::into(e))
        .sum();
    println!("{} potions needed", results);
}
