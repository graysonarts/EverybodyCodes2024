use std::fmt::Display;

// const NOTES: &str = "xBxAAABCDxCC";
const NOTES: &str = "";

enum Enemy {
    Empty,
    Ant,
    Beetle,
    Cockroach,
    Dragonfly,
}

impl Enemy {
    fn is_empty(&self) -> bool {
        match self {
            Enemy::Empty => true,
            _ => false,
        }
    }
}

impl Display for Enemy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let enemy = match self {
            Enemy::Empty => "x",
            Enemy::Ant => "A",
            Enemy::Beetle => "B",
            Enemy::Cockroach => "C",
            Enemy::Dragonfly => "D",
        };
        f.write_str(enemy)
    }
}

impl From<&Enemy> for i32 {
    fn from(value: &Enemy) -> Self {
        match value {
            Enemy::Ant => 0,
            Enemy::Beetle => 1,
            Enemy::Cockroach => 3,
            Enemy::Dragonfly => 5,
            Enemy::Empty => 0,
        }
    }
}

impl From<char> for Enemy {
    fn from(value: char) -> Self {
        match value {
            'A' => Enemy::Ant,
            'B' => Enemy::Beetle,
            'C' => Enemy::Cockroach,
            'D' => Enemy::Dragonfly,
            'x' => Enemy::Empty,
            _ => panic!("Invalid enemy"),
        }
    }
}
fn main() {
    let data: Vec<_> = NOTES.chars().collect();

    let potions: i32 = data
        .windows(3)
        .step_by(3)
        .map(|c| {
            let e1: Enemy = c[0].into();
            let e2: Enemy = c[1].into();
            let e3: Enemy = c[2].into();
            print!("{}{}{} = ", e1, e2, e3);
            let extra_cost = match (e1.is_empty(), e2.is_empty(), e3.is_empty()) {
                (true, true, true)
                | (false, true, true)
                | (true, false, true)
                | (true, true, false) => 0,
                (true, false, false) | (false, true, false) | (false, false, true) => 1,
                _ => 2,
            };
            let mut sum = Into::<i32>::into(&e1) + Into::<i32>::into(&e2) + Into::<i32>::into(&e3);
            if !e1.is_empty() {
                sum += extra_cost;
            }
            if !e2.is_empty() {
                sum += extra_cost;
            }
            if !e3.is_empty() {
                sum += extra_cost;
            }
            println!("{}", sum);
            sum
        })
        .sum();

    println!("{} potions needed", potions);
}
